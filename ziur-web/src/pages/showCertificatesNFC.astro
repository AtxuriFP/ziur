---
import Layout from '../layouts/Layout.astro';
---

<Layout title="NFC Certificate Reader">
    <main>
        <div class="logo-container">
            <img src="/logo-ziur.png" alt="ZIUR Logo" class="custom-logo" width="200" height="200" />
        </div>
        <h1>Certificate <span class="text-gradient">Reader</span></h1>
        <button id="startScan" class="scan-button">Start NFC Scan</button>
        <div class="instructions" id="status">
            Press button to start NFC reading
        </div>
        <div id="certificatesGrid" class="certificates-grid">
            <!-- Certificates will be displayed here -->
        </div>
    </main>
</Layout>

<script>
    import CourseCertificationService from '../../lib/CourseCertificationService';

    interface Course {
        id: number;
        name: string;
        description: string;
        trainerName: string;
        organization: string;
        startDate: Date;
        endDate: Date;
        durationInHours: number;
        active: boolean;
        courseURI: string;
    }

    interface NFCRecord {
        recordType: string;
        data: ArrayBuffer;
    }

    interface NFCReading {
        message: {
            records: NFCRecord[];
        };
    }

    let certificatesDisplayed = false;

    function extractEthereumAddress(url: string): string | null {
        const match = url.match(/^ethereum:\/\/([a-fA-F0-9x]{42})$/);
        return match ? match[1] : null;
    }

    function formatDate(date: Date): string {
        return new Date(date).toLocaleDateString();
    }

    function createCertificateCard(course: Course): string {
        return `
            <div class="card" onclick="this.classList.toggle('is-flipped')">
                <div class="card-face card-front">
                    <div class="card-header">
                        <div class="award-icon">üèÜ</div>
                        <div class="certificate-id">
                            <span class="label">ZIUR Certificate</span>
                            <span class="id">#${course.id}</span>
                        </div>
                    </div>
                    
                    <div class="card-title">
                        <h2>${course.name}</h2>
                        <p>${course.organization}</p>
                    </div>

                    <div class="card-stats">
                        <div class="stat">
                            <span class="icon">‚è±Ô∏è</span>
                            <span>${course.durationInHours}h</span>
                        </div>
                        <div class="stat">
                            <span class="icon">üë®‚Äçüè´</span>
                            <span>${course.trainerName}</span>
                        </div>
                    </div>
                </div>

                <div class="card-face card-back">
                    <h3>Course Details</h3>
                    <div class="back-content">
                        <div class="detail">
                            <span class="icon">üìÖ</span>
                            <div>
                                <p>Start: ${formatDate(course.startDate)}</p>
                                <p>End: ${formatDate(course.endDate)}</p>
                            </div>
                        </div>
                        <div class="detail">
                            <span class="icon">üìö</span>
                            <p>${course.description}</p>
                        </div>
                        <div class="detail">
                            <span class="icon">üè¢</span>
                            <p>${course.organization}</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    async function displayCertificates(address: string): Promise<void> {
        try {
            const courses = await CourseCertificationService.getCourses();
            const validCertificates = await Promise.all(
                courses.map(async (course: Course) => {
                    const isValid = await CourseCertificationService.verifyCertificateOwnership(address, course.id);
                    return isValid ? course : null;
                })
            );

            const filteredCertificates = validCertificates.filter((cert): cert is Course => cert !== null);
            const certificatesGrid = document.getElementById('certificatesGrid');
            
            if (!certificatesGrid) return;

            if (filteredCertificates.length === 0) {
                certificatesGrid.innerHTML = '<p class="no-certificates">No valid certificates found for this address</p>';
                return;
            }

            certificatesGrid.innerHTML = filteredCertificates.map(createCertificateCard).join('');
            certificatesDisplayed = true;
        } catch (error) {
            console.error('Error displaying certificates:', error);
            const statusElement = document.getElementById('status');
            if (statusElement) {
                statusElement.textContent = 'Error loading certificates';
            }
        }
    }

    async function startNFCReader(): Promise<void> {
        const statusElement = document.getElementById('status');
        if (!statusElement) return;
        
        try {
            if ('NDEFReader' in window) {
                const ndef = new (window as any).NDEFReader();
                await ndef.scan();
                statusElement.textContent = 'NFC Ready - Touch card';
                
                ndef.addEventListener('reading', ({ message }: NFCReading) => {
                    for (const record of message.records) {
                        if (record.recordType === "url") {
                            const textDecoder = new TextDecoder();
                            const url = textDecoder.decode(record.data);
                            const address = extractEthereumAddress(url);
                            
                            if (address && statusElement) {
                                statusElement.textContent = 'Loading certificates...';
                                displayCertificates(address);
                            } else if (statusElement) {
                                statusElement.textContent = 'Invalid Ethereum address format';
                            }
                        }
                    }
                });
            } else {
                statusElement.textContent = 'NFC not supported on this device';
            }
        } catch (error) {
            if (error instanceof Error) {
                if (error.name === 'NotAllowedError') {
                    statusElement.textContent = 'Please enable NFC permissions';
                } else if (error.name === 'NotSupportedError') {
                    statusElement.textContent = 'NFC is unavailable or disabled';
                } else {
                    statusElement.textContent = `Error: ${error.message}`;
                }
            }
        }
    }

    // Event listeners with null checks
    const scanButton = document.getElementById('startScan');
    scanButton?.addEventListener('click', startNFCReader);

    document.addEventListener('visibilitychange', () => {
        if (!document.hidden && !certificatesDisplayed) {
            const statusElement = document.getElementById('status');
            if (statusElement) {
                statusElement.textContent = 'Press button to start NFC reading';
            }
        }
    });

    document.addEventListener('DOMContentLoaded', async () => {
        try {
            await CourseCertificationService.init();
        } catch (error) {
            console.error('Failed to initialize Web3:', error);
            const statusElement = document.getElementById('status');
            if (statusElement) {
                statusElement.textContent = 'Error connecting to blockchain';
            }
        }
    });
</script>

<style>
    main {
        margin: auto;
        padding: 1rem;
        width: 100%;
        max-width: 1200px;
        color: white;
        font-size: 20px;
        line-height: 1.6;
    }
    .logo-container {
        display: flex;
        justify-content: center;
        margin-bottom: 2rem;
    }
    .custom-logo {
        max-width: 200px;
        height: auto;
    }
    h1 {
        font-size: 3rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 1em;
    }
    .text-gradient {
        background-image: var(--accent-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-size: 400%;
        background-position: 0%;
    }
    .scan-button {
        display: block;
        margin: 0 auto;
        padding: 0.8em 1.6em;
        background-color: rgba(var(--accent-light), 12%);
        border: 1px solid rgba(var(--accent-light), 25%);
        border-radius: 8px;
        color: white;
        font-size: 1.2em;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    .scan-button:hover {
        background-color: rgba(var(--accent-light), 30%);
    }
    .instructions {
        margin: 2rem auto;
        padding: 1.5rem;
        border: 1px solid rgba(var(--accent-light), 25%);
        background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
        border-radius: 8px;
        text-align: center;
    }
    .certificates-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
        padding: 2rem 0;
    }
    .card {
        width: 100%;
        height: 400px;
        perspective: 1000px;
        cursor: pointer;
    }
    .card.is-flipped .card-front {
        transform: rotateY(180deg);
    }
    .card.is-flipped .card-back {
        transform: rotateY(0);
    }
    .card-face {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        transition: transform 0.6s;
        border-radius: 1rem;
        padding: 1.5rem;
    }
    .card-front {
        background: linear-gradient(135deg, #6366f1, #8b5cf6);
    }
    .card-back {
        background: linear-gradient(135deg, #8b5cf6, #6366f1);
        transform: rotateY(180deg);
    }
    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }
    .award-icon {
        font-size: 2rem;
    }
    .certificate-id {
        text-align: right;
    }
    .label {
        display: block;
        font-size: 0.75rem;
        opacity: 0.8;
    }
    .id {
        font-size: 1.25rem;
        font-weight: bold;
    }
    .card-title {
        text-align: center;
        margin: 2rem 0;
    }
    .card-title h2 {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    .card-stats {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-top: 2rem;
    }
    .stat {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    .icon {
        font-size: 1.25rem;
    }
    .back-content {
        margin-top: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    .detail {
        display: flex;
        gap: 0.5rem;
    }
    .no-certificates {
        text-align: center;
        grid-column: 1 / -1;
        padding: 2rem;
        background: rgba(var(--accent-light), 12%);
        border-radius: 8px;
    }
    @media (max-width: 768px) {
        .certificates-grid {
            grid-template-columns: 1fr;
        }
    }
</style>